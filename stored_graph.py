import numpy as np 
import random

def option(s):
    if s == "default":
        # number of nodes in the graph
        N = 4

        G = np.asarray([[[0, -1, -1], #from 1 to 1, distance, number of lanes, v_m
                  [10, 4, 5],
                  [12, 2, 8],
                  [20, 5, 5]],

                 [[10, 2, 5],
                  [0, -1, -1],
                  [6, 2, 10],
                  [7, 5, 8.5]],

                 [[12, 2, 8],
                  [6, 2, 10],
                  [0, -1, -1],
                  [18, 4, 10]],

                 [[20, 5, 5],
                  [7, 5, 8.5],
                  [18, 4, 10],
                  [0, -1, -1]]])
          
        # OD matrix  
        OD = np.asarray([[4, 4, 4, 3], 
                         [5, 2, 6, 6],
                         [4, 7, 5, 1],
                         [9, 8, 0, 6]])
        MaxStep = 2
    
    elif s == "cycle":
        N = 3
        MaxStep = 7
        G = np.asarray([[[0, -1, -1],
                         [10, 2, 5],
                         [10, 2, 5]],

                        [[10, 2, 5],
                         [0, -1, -1],
                         [10, 2, 5]],

                        [[10, 2, 5],
                         [10, 2, 5],
                         [0, -1, -1]]
                         ])
        OD = np.asarray([[0, 5, 5],
                         [0, 0, 0],
                         [0, 0, 0]])

    elif s == "back":
        N = 4
        MaxStep = 5
        G = np.asarray([[[0, -1, -1], #from 1 to 1, distance, number of lanes, v_m
                          [1000, 2, 5],
                          [10000000, 0.1, 0.1],
                          [1000, 2, 5]],

                         [[1, 10, 50],
                          [0, -1, -1],
                          [1000, 2, 5],
                          [1000, 2, 5]],

                         [[1000000000, 0.1, 0.1],
                          [1, 10, 50],
                          [0, -1, -1],
                          [1, 10, 50]],

                         [[1000, 2, 5],
                          [1000, 2, 5],
                          [10, 2, 5],
                          [0, -1, -1]]])
        
        OD = np.asarray([[0, 0, 30, 0],
                         [0, 0, 0, 0],
                         [0, 0, 0, 0],
                         [0, 0, 0, 0]])

    elif s == "example":
        N = 4
        MaxStep = 4
        G = np.asarray([[[0, -1, -1], #from 1 to 1, distance, number of lanes, v_m
                          [10, 2, 5],
                          [10000000, 0.1, 0.1],
                          [10, 2, 5]],

                         [[10, 2, 5],
                          [0, -1, -1],
                          [10, 2, 5],
                          [10, 2, 5]],

                         [[1000000000, 0.1, 0.1],
                          [10, 2, 5],
                          [0, -1, -1],
                          [10, 2, 5]],

                         [[10, 2, 5],
                          [10, 2, 5],
                          [10, 2, 5],
                          [0, -1, -1]]])
        
        OD = np.asarray([[0, 0, 30, 0],
                         [0, 0, 0, 0],
                         [0, 0, 0, 0],
                         [0, 0, 0, 0]])

    elif s == "example2": #incomplete
        N = 4
        MaxStep = 3
        G = np.asarray([[[0, -1, -1], #from 1 to 1, distance, number of lanes, v_m
                          [10, 2, 5],
                          [-1, -1, -1],
                          [-1, -1, -1]],

                         [[10, 2, 5],
                          [0, -1, -1],
                          [10, 2, 5],
                          [-1, -1, -1]],

                         [[-1, -1, -1],
                          [10, 2, 5],
                          [0, -1, -1],
                          [10, 2, 5]],

                         [[-1, -1, -1],
                          [-1, -1, -1],
                          [10, 2, 5],
                          [0, -1, -1]]])
        
        OD = np.asarray([[0, 6, 6, 6],
                         [0, 0, 10, 10],
                         [0, 0, 0, 18],
                         [0, 0, 0, 0]])

    elif s == "incomplete_5":
        N = 5
        MaxStep = 5
        G = np.asarray([[[0, -1, -1],
                         [12, 3, 30],
                         [12, 3, 30],
                         [-1, -1, -1],
                         [-1, -1, -1]],

                        [[12, 3, 30],
                         [0, -1, -1],
                         [12, 3, 30],
                         [12, 3, 30],
                         [-1, -1, -1]],

                        [[12, 3, 30],
                         [12, 3, 30],
                         [0, -1, -1],
                         [12, 3, 30],
                         [12, 3, 30]],

                        [[-1, -1, -1],
                         [12, 3, 30],
                         [12, 3, 30],
                         [0, -1, -1],
                         [12, 3, 30]],

                        [[-1, -1, -1],
                         [-1, -1, -1],
                         [12, 3, 30],
                         [12, 3, 30],
                         [0, -1, -1]]])

        OD = np.asarray([[0, 0, 0, 10, 10],
                         [0, 0, 0, 0, 5],
                         [0, 0, 0, 0, 0],
                         [5, 0, 0, 0, 0],
                         [12, 12, 0, 0, 0]])
    
    elif s == "new york":
        N = 5
        # Manhattan, Brooklyn, Queens, the Bronx and Staten Island
        MaxStep = 2
        G = np.asarray([
                        [[0, -1, -1],
                         [9.44, 3, 40],# FDR drive (9.44miles), Brooklyn Bridge
                         [14.9, 3, 45],# I-495, 
                         [9.3, 3, 45], #I-278
                         [-1, -1, -1]], #Man -> Staten X
                       
                        [[9.44, 3, 40],
                         [0, -1, -1],
                         [10.4, 3, 45], #B -> Q
                         [18.7, 2, 40],
                         [13.3, 4, 40]],
                     
                        [[14.9, 3, 45],
                         [10.4, 3, 45],
                         [0, -1, -1],
                         [12.8, 3, 45], # Q -> Bronx,
                         [-1, -1, -1]], # Q -> S X
                     
                        [[9.3, 3, 45], #Bronx
                         [18.7, 2, 40],
                         [12.8, 3, 45],
                         [0, -1, -1],
                         [-1, -1, -1]],
                     
                        [[-1, -1, -1],
                         [18.0, 3, 45],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [0, -1, -1]]
                       ])

        OD = np.asarray([[0, 40, 42, 39, 66], 
                         [50, 0, 33, 60, 71],
                         [45, 72, 0, 57, 22],
                         [90, 60, 34, 0, 23],
                         [45, 56, 65, 33, 0]
                        ])
    elif s == "manhattan":
        N = 17
        MaxStep = 2
        G = np.asarray([  #distance, lanes, velocity.  #1. upper west
                        [[0, -1, -1], 
                         [1.7, 1, 25], # upper east
                         [2.2, 4, 25], # midtown west
                         [3.0, 2, 25], # midtown east
                         [3.4, 3, 25], # garment
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[1.9, 2, 25], #2 upper east
                         [0, -1, -1],
                         [3.0, 2, 25],
                         [1.7, 3, 20],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[2.5, 2, 25],    #3 midtown west
                         [2.9, 2, 23],
                         [0, -1, -1],
                         [1.9, 3, 20],
                         [1.3, 2, 25], #garment
                         [2.4, 3, 25], #murray hill
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[2.8, 2, 25], # 4 midtown east
                         [1.7, 2, 20],
                         [1.2, 3, 25],
                         [0.0, -1, -1],
                         [1.6, 3, 20],
                         [0.8, 2, 20],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[-1, -1, -1], # 5 garment
                         [-1, -1, -1],
                         [0.9, 3, 25],
                         [1.6, 4, 20],
                         [0, -1, -1],
                         [1.0, 2, 25], # murray
                         [1.0, 3, 30], # chelsea
                         [1.5, 3, 20], # gramercy
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[-1, -1, -1], # 6 murray
                         [-1, -1, -1],
                         [1.8, 3, 25], #midtown w
                         [0.8, 3, 20], #midtown e
                         [1.2, 2, 20], #garment
                         [0, -1, -1],
                         [2.0, 3, 25],
                         [1.4, 2, 25],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[-1, -1, -1], # 7 chelsea
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [1.0, 2, 25], #garment
                         [1.9, 2, 25], #murray 
                         [0, -1, -1],
                         [0.9, 3, 25],
                         [0.9, 3, 28], #west village
                         [2.3, 2, 30], #east village
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[-1, -1, -1], # 8 gramercy
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [1.4, 3, 25], #garment
                         [1.4, 2, 25], # murray
                         [0.8, 1, 25], #chelsea
                         [0, -1, -1],
                         [1.1, 3, 20], #west village
                         [1.6, 2, 20], # east village
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                     
        
          
                        [[-1, -1, -1], # 9 west village
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [1.1, 3, 25], #chelsea
                         [1.3, 2, 25], #gramercy
                         [0, -1, -1], #west village
                         [1.5, 2, 25], # east village
                         [1.0, 3, 20], #soho
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                             
        
          
                        [[-1, -1, -1], # 10 east village
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [2.3, 3, 20], #chelsea
                         [1.5, 2, 20], #gramercy
                         [1.8, 3, 25], #west village
                         [0, -1, -1], # east village
                         [1.6, 3, 25],#soho
                         [1.3, 1, 15], # little italy
                         [1.9, 3, 25], #lower east side
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1]],
                             
        
          
                        [[-1, -1, -1], # 11 soho
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [1.1, 3, 20], #west village
                         [1.6, 2, 30], # east village
                         [0, -1, -1],
                         [0.6, 2, 20], #little italy
                         [-1, -1, -1], #lower east
                         [0.8, 2, 20], #tribeca
                         [0.9, 2, 25], #chinatown
                         [-1, -1, -1],
                         [-1, -1, -1]],
                             
        
          
                        [[-1, -1, -1], # 12 little italy
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [1.3, 2, 25], # east village
                         [0.4, 3, 20], #soho
                         [0, -1, -1],
                         [1.2, 2, 25], #lower east
                         [-1, -1, -1], #tribeca
                         [0.6, 2, 25], #chinatown
                         [-1, -1, -1], #battery
                         [-1, -1, -1]],#financial
                             
        
          
                        [[-1, -1, -1], # 13 lower east
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [0.9, 3, 25], # east village
                         [-1, -1, -1], #soho
                         [0.8, 2, 25], #little italy
                         [0, -1, -1],
                         [-1, -1, -1], #tribeca
                         [1.3, 2, 25], #chinatown
                         [-1, -1, -1], #battery
                         [1.9, 3, 25]], #financial
                             
        
          
                        [[-1, -1, -1], # 14 tribeca
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [-1, -1, -1], # east village
                         [0.9, 3, 25], #soho
                         [-1, -1, -1], #italy
                         [-1, -1, -1], #lower east
                         [0, -1, -1], #tribeca
                         [1.1, 3, 25],
                         [1.1, 2, 25],
                         [0.8, 3, 25]],
                             
        
          
                        [[-1, -1, -1], # 15 chinatown
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [-1, -1, -1], # east village
                         [0.8, 2, 20], #soho
                         [0.4, 1, 20], # italy
                         [1.1, 2, 25], # lower east
                         [0.9, 3, 25], #tribeca
                         [0, -1, -1],
                         [-1, -1, -1],
                         [1.3, 3, 30]], #financial
                             
        
          
                        [[-1, -1, -1], # 16 battery
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [-1, -1, -1], # east village
                         [-1, -1, -1], #soho
                         [-1, -1, -1], #italy
                         [-1, -1, -1], #lower east
                         [1.6, 3, 25], #tribeca
                         [-1, -1, -1], #chinatown
                         [0, -1, -1],
                         [0.5, 3, 20]],
                             
        
          
                        [[-1, -1, -1], # 17 financial
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1],
                         [-1, -1, -1], #garment
                         [-1, -1, -1], # murray
                         [-1, -1, -1], #chelsea
                         [-1, -1, -1],
                         [-1, -1, -1], #west village
                         [-1, -1, -1], # east village
                         [-1, -1, -1], #soho
                         [-1, -1, -1], #italy
                         [1.7, 3, 25], #lower east
                         [0.9, 2, 25], #tribeca
                         [1.2, 1, 20], #chinatown
                         [0.7, 3, 25], #ba
                         [0, -1, -1]]
                       ])
        # OD = [[random.randint(1, 50) /  10 for _ in range(N)] for _ in range(N)]
        OD = [[10 for _ in range(N)] for _ in range(N)]
        OD = np.asarray(OD)
        for i in range(N):
            OD[i, i] = 0
    
    elif s == "random":
        N = random.randint(0, 5) * 10 + random.randint(0, 10)
        MaxStep = 2
        OD = [[random.randint(10, 100) for _ in range(N)] for _ in range(N)]
        OD = np.asarray(OD)
        G = [[[random.randint(10, 30), 3, 5 * random.randint(6,14)] for _ in range(N)] for _ in range(N)]
        G = np.asarray(G)

    else:
        N = 4
        G = np.asarray([[[0, -1, -1], #from 1 to 1, distance, number of lanes, v_m
                [5, 2, 3],
                [5, 2, 3],
                [11, 2.0, 3]],

               [[5, 2, 3],
                [0, -1, -1],
                [5, 2, 3],
                [5, 2, 3]],

               [[5, 2, 3],
                [5, 2, 3],
                [0, -1, -1],
                [5, 2, 3]],

               [[5, 2, 3],
                [5, 2, 3],
                [5, 2, 3],
                [0, -1, -1]]])
        
        # OD matrix  
        OD = np.asarray(
              [[0, 0, 0, 1000000000.0], 
               [0, 0, 0, 0],
               [0, 0, 0, 0],
               [0, 0, 0, 0]])
        MaxStep = 2
    return N, G, OD, MaxStep

